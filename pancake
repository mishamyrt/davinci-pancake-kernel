#!/bin/bash
set -e

bootstrap_path=$(pwd)

# Build variables
arch="arm64"
defconfig="pancake_defconfig"
llvm_revision="r383902c"

# Toolchain URLs
gs="https://android.googlesource.com/platform"
gs_prebuilts="$gs/prebuilts"
llvm_url="$gs_prebuilts/clang/host/linux-x86"
gcc32_url="$gs_prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9"
gcc64_url="$gs_prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9"

# Upstream repos
als_url="https://github.com/android-linux-stable/msm-4.14"
als_branch="kernel.lnx.4.14.r4-rel"
caf_vendor_url="https://source.codeaurora.org/quic/la/platform/vendor"
audio_kernel_url="$caf_vendor_url/opensource/audio-kernel"
qcacld_url="$caf_vendor_url/qcom-opensource/wlan/qcacld-3.0"
qca_wifi_url="$caf_vendor_url/qcom-opensource/wlan/qca-wifi-host-cmn"
fw_api_url="$caf_vendor_url/qcom-opensource/wlan/fw-api"

# Paths
gcc32_prefix="$toolchain_path/gcc32/bin/arm-linux-androideabi-"
gcc64_prefix="$toolchain_path/gcc64/bin/aarch64-linux-android-"
llvm_bin="$toolchain_path/llvm/clang-$llvm_revision/bin"
out_path="out"
zip_basename="pancake"

# Internal variables
branch="$(git rev-parse --abbrev-ref HEAD)"
threads="$(getconf _NPROCESSORS_ONLN)"
out_zip="$out_path/$zip_basename.zip"
if (( $threads > 30 )); then
  threads="30"
fi

# Default kmake flags
kmake_flags=(
	-j"${threads}"
	ARCH="$arch"
	O="out"
)

# Checks if toolchain path variable is set
check_toolchain () {
  if [ -z "$toolchain_path" ]; then
    echo "Toolchain path is not provided."
    echo "Please set \$toolchain_path environment variable."
    exit 1
  else
    mkdir -p "$toolchain_path"
  fi
}

# Main wrapper for all `make` functions
kmake () {
  make "${kmake_flags[@]}" "$@"
}

# Shallow clone helper
get_repo () {
  if [ -d "$2" ]; then
    cd $2
    git pull
    cd $bootstrap_path
  else
    git clone -j"$threads" --depth=1 "$1" "$2"
  fi
}

# Download toolchain to $toolchain_path
setup () {
  get_repo "$llvm_url" "$toolchain_path/llvm"
  get_repo "$gcc32_url" "$toolchain_path/gcc32"
  get_repo "$gcc64_url" "$toolchain_path/gcc64"
}

# Parse CLang version
get_clang_version () {
  echo $($llvm_bin/clang --version | \
                   head -n 1 | \
                   perl -ne 'print $1 if  /clang version (.[\.0-9]+)/gs')
}

# Parse binutils version
get_binutils_version () {
  echo $("$gcc64_prefix"ar --version | perl -ne 'print $1 if  /\(GNU Binutils\) (.[^)]+)/gs')
}

# Create ZIP installer
pack () {
  rm -f flasher/banner
  cp flasher/banner-template flasher/banner
  echo " " >> flasher/banner
  echo "Branch: $branch" >> flasher/banner
  echo "CLang version: $(get_clang_version)" >> flasher/banner
  echo "Binutils version: $(get_binutils_version)" >> flasher/banner
  cp -f out/arch/arm64/boot/{Image.gz,dtbo.img} flasher/
  cd flasher/
  rm -f $out_zip
  zip -r9 ../$out_zip * -x banner-template
}

# Generate build config
configure () {
  kmake "$defconfig"
}

get_line () {
  echo "$1" | head -n $2 | tail -n 1
}

print_build_info () {
  if test -f "$out_zip"; then
    banner_content=$(unzip -c $out_zip banner)
    branch=$(get_line "$banner_content" 12 | cut -d' ' -f2)
    clang_version=$(get_line "$banner_content" 13 | cut -d' ' -f3)
    gcc_version=$(get_line "$banner_content" 14 | cut -d' ' -f3)
    echo "File path: $out_zip"
    echo "Branch: $branch"
    echo "CLang version: $clang_version"
    echo "Binutils version: $gcc_version"
  else
    echo "There is no build."
  fi
}

# Format kernel local version
get_local_version () {
  local_version="${branch/feature\//}"
  local_version="${local_version/upstream\//}"
  local_version="${local_version/\//-}"
  local_version="${local_version/ten/}"
  local_version="${local_version/-develop/develop}"
  if (("${#local_version}" > 0)); then
    if [[ ${local_version:0:1} != "-" ]]; then
      local_version="-$local_version"
    fi
  fi
  echo $local_version
}

# Format kernel display local version
get_display_version () {
  local_version=$(get_local_version)
  if (("${#local_version}" > 0)); then
    echo $local_version
  else
    echo "ðŸ¥ž"
  fi
}

print_info () {
  local_version=$(get_display_version)
  echo "Branch: $branch"
  echo "Commit: $(git rev-parse HEAD)"
  echo "Architecture: $arch"
  echo "Config: $defconfig"
  echo "Local version: $local_version"
  echo "CLang version: $(get_clang_version)"
  echo "Binutils version: $(get_binutils_version)"
  echo "Toolchain path: $toolchain_path"
}

# Build kernel
build () {
  echo "Building..."
  local_version=$(get_display_version)
  print_info
  sed -i "s/\"-Pancake\"/\"-Pancake$local_version\"/g" out/.config
  kmake_flags+=(
    CC="clang"
    CLANG_TRIPLE="aarch64-linux-gnu-"
    CROSS_COMPILE="$gcc64_prefix"
    CROSS_COMPILE_ARM32="$gcc32_prefix"
    AR="llvm-ar"
    NM="llvm-nm"
    OBJCOPY="llvm-objcopy"
    OBJDUMP="llvm-objdump"
    STRIP="llvm-strip"
  )
  kmake "$@"
}

publish () {
  rm -rf release/
  git checkout release/.gitignore
  if [ -z "$surge_token" ]; then
    echo "Surge token is not provided."
    echo "Please set \$surge_token environment variable."
    exit 1
  fi
  if [ -z "$surge_url" ]; then
    echo "Surge URL is not provided."
    echo "Please set \$surge_url environment variable."
    exit 1
  fi
  cp $out_zip release/
  hash="$(sha1sum $out_zip | cut -d' ' -f1)"

  # Export latest 50 commits to changelog
  git log -n 50 --pretty=format:'* %s' > release/changelog.txt
  cat <<- EOF > release/index.html
{
  "kernel": {
    "name": "Pancake ðŸ¥ž nightly",
    "sha1": "$hash",
    "link": "$surge_url/pancake.zip",
    "version": "$(date '+%Y-%m-%d-%H-%M')$(get_local_version)",
    "date": "$(date '+%Y-%m-%d')",
    "changelog_url": "$surge_url/changelog.txt"
  },
  "support": {
    "link": "https://github.com/mishamyrt/davinci-pancake-kernel/issues"
  }
}
EOF
  surge --project release/ -d "$surge_url" --token "$surge_token"
}

telegram_post () {
  telegram_flags=(
    BRANCH="$branch"
    TOKEN="$telegram_token"
    CHAT_ID="$telegram_chat_id"
    COMMIT="$(git rev-parse HEAD)"
  )
  case "$1" in
    start)
      export "${telegram_flags[@]}"
      python3 telegram.py start
      ;;
    fail)
      export "${telegram_flags[@]}"
      python3 telegram.py fail $2
      ;;
    success)
      local_version="$(get_local_version)"
      zip_name="out/pancake$local_version.zip"
      old_zip_name="$out_zip"
      if [ "$zip_name" != "$old_zip_name" ]; then
        cp -f "$old_zip_name" "$zip_name"
      fi
      telegram_flags+=(
        FILE_NAME="$zip_name"
      )
      export "${telegram_flags[@]}"
      python3 telegram.py success $2
      ;;
  esac
}

sub_action () {
    git subtree $1 --prefix drivers/staging/qca-wifi-host-cmn $qca_wifi_url "$2"
    git subtree $1 --prefix drivers/staging/qcacld-3.0 $qcacld_url "$2"
    git subtree $1 --prefix drivers/staging/fw-api $fw_api_url "$2"
    git subtree $1 --prefix techpack/audio/ $audio_kernel_url "$2"
}

upstream () {
  case "$1" in
    linux)
      git pull $als_url $als_branch
      ;;
    caf-sub)
      shift
      sub_action pull "$@"
      ;;
  esac
}

add_sub () {
    sub_action add "$@"
}

export PATH="$llvm_bin:$PATH"
export LD_LIBRARY_PATH="$llvm_bin/../lib:$llvm_bin/../lib64:$LD_LIBRARY_PATH"

case "$1" in
  setup|s)
    check_toolchain
    setup
    ;;
  information|i)
    print_info
    ;;
  regenerate|r)
    check_toolchain
    configure
    kmake savedefconfig
    cp -f out/defconfig "arch/$arch/configs/$defconfig"
    ;;
  build|b)
    check_toolchain
    shift
    build "$@"
    ;;
  configure|c)
    check_toolchain
    configure
    ;;
  clear|cc)
    rm -rf out/
    git checkout out/.gitignore
    ;;
  pack|p)
    pack
    ;;
  publish|pb)
    publish
    ;;
  build-information|bi)
    print_build_info
    ;;
  telegram|tg)
    shift
    telegram_post "$@"
    ;;
  master|m)
    check_toolchain
    configure
    build
    pack
  ;;
  upstream|u)
    shift
    upstream "$@"
  add_sub|a)
    shift
    upstream "$@"
esac