#!/bin/bash
set -e

if [ -z "$toolchain_path" ]
then
      echo "Toolchain path is not provided."
      echo "Please set \$toolchain_path environment variable."
      exit 1
fi

# Toolchain URLs
gs="https://android.googlesource.com/platform"
gs_prebuilts="$gs/prebuilts"
gs_system="$gs/system"
llvm_url="$gs_prebuilts/clang/host/linux-x86"
gcc32_url="$gs_prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9"
gcc64_url="$gs_prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9"
libufdt_url="$gs_system/libufdt"

# Toolchain paths
gcc32_prefix="$toolchain_path/gcc32/bin/arm-linux-androideabi-"
gcc64_prefix="$toolchain_path/gcc64/bin/aarch64-linux-android-"
llvm_bin="$toolchain_path/llvm/clang-r377782b/bin"
libufdt_bin="$toolchain_path/libufdt/utils/src"

# Build variables
arch="arm64"
defconfig="davinci_defconfig"
threads="$(getconf _NPROCESSORS_ONLN)"
branch="$(git rev-parse --abbrev-ref HEAD)"

# Default kmake flags
kmake_flags=(
	-j"${threads}"
	ARCH="$arch"
	O="out"
)

# Main wrapper for all `make` functions
kmake () {
    make "${kmake_flags[@]}" "$@"
}

# Shallow clone helper
get_repo () {
    git clone -j"$threads" --depth=1 "$1" "$2"
}

# Download toolchain to $toolchain_path
setup () {
    get_repo "$libufdt_url" "$toolchain_path/libufdt"
    get_repo "$llvm_url" "$toolchain_path/llvm"
    get_repo "$gcc32_url" "$toolchain_path/gcc32"
    get_repo "$gcc64_url" "$toolchain_path/gcc64"
}

# Parse CLang version
get_clang_version () {
    echo $($llvm_bin/clang --version | head -n 1 | perl -ne 'print $1 if  /clang version (.[\.0-9]+)/gs')
}

# Parse binutils version
get_binutils_version () {
    echo $("$gcc64_prefix"ar --version | perl -ne 'print $1 if  /\(binutils-(.[^)]+)\)/gs')
}

# Create ZIP installer
pack () {
    git checkout flasher/banner
    echo " " >> flasher/banner
    echo "Branch: $branch" >> flasher/banner
    echo "CLang version: $(get_clang_version)" >> flasher/banner
    echo "Binutils version: $(get_binutils_version)" >> flasher/banner
    cp -f out/arch/arm64/boot/{Image.gz,dtbo.img} flasher/
    cd flasher/
    rm -f pancake.zip
    zip -r9 ../out/pancake.zip *
}

# Generate build config
configure () {
    kmake "$defconfig"
}

# Format kernel local version
get_local_version () {
    local_version="${branch/feature\//}"
    local_version="${local_version/upstream\//}"
    local_version="${local_version/\//-}"
    local_version="${local_version/ten/}"
    local_version="${local_version/-develop/develop}"
    if (("${#local_version}" > 0))
    then
        echo "-$local_version"
    fi
}

# Build separated dtbo.img
build_dtbo () {
    python \
    "$libufdt_bin/mkdtboimg.py" create \
    "out/arch/$arch/boot/dtbo.img" \
    out/arch/$arch/boot/dts/qcom/*.dtbo
}

# Build kernel
build () {
    echo "Building..."
    local_version=$(get_local_version)
    echo "Architecture: '$arch'"
    echo "Config: $defconfig"
    echo "Local version: $local_version"
    sed -i "s/\"-Pancake\"/\"-Pancake$local_version\"/g" out/.config
    kmake_flags+=(
        CC="clang"
        CLANG_TRIPLE="aarch64-linux-gnu-"
        CROSS_COMPILE="$gcc64_prefix"
        CROSS_COMPILE_ARM32="$gcc32_prefix"
        AR="llvm-ar"
        NM="llvm-nm"
        OBJCOPY="llvm-objcopy"
        OBJDUMP="llvm-objdump"
        STRIP="llvm-strip"
    )
    kmake "$@"
    build_dtbo
}

export PATH="$llvm_bin:$PATH"
export LD_LIBRARY_PATH="$llvm_bin/../lib:$llvm_bin/../lib64:$LD_LIBRARY_PATH"

mkdir -p "$toolchain_path"

case "$1" in
    setup|s)
        setup
        ;;
    regenerate|r)
        configure
        cp -f out/.config "arch/$arch/configs/$defconfig"
        ;;
    build|b)
        shift
        build "$@"
        ;;
    configure|c)
        configure
        ;;
    clear|cc)
        rm -rf out/
        git checkout out/.gitignore
        ;;
    pack|p)
        pack
        ;;
    master|m)
        configure
        build
        pack
esac