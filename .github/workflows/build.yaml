name: build

on: push

env:
  DEFCONFIG: "vendor/davinci_defconfig"
  ARCH: "arm64"
  SUBARCH: "arm64"
  GCC64_FOLDER: "toolchains/gcc64"
  GCC32_FOLDER: "toolchains/gcc32"
  DTBO_UTILS_FOLDER: "toolchains/dtbo"
  LLVM_FOLDER: "toolchains/llvm"
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: "-1001465816588"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Post build start
      id: post_start
      run: echo "##[set-output name=message_id;]$(python3 scripts/pancake/telegram_post.py start)"

    - name: Install system dependencies
      env:
        UBUNTU_DEPS: |
          lib32z-dev automake flex lzop bison gperf build-essential bzip2 
          curl zlib1g-dev g++-multilib python-networkx libc6-dev-i386 zip 
          libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools schedtool 
          pngcrush dpkg-dev liblz4-tool make optipng maven libswitch-perl 
          libssl-dev unzip bc policycoreutils ccache libxml-sax-base-perl 
          libxml-simple-perl libgl1-mesa-dev x11proto-core-dev libx11-dev 
          git xsltproc libxml2-utils minicom lib32ncurses5-dev libelf-dev 
          pwgen 
      run: |
        sudo apt update
        sudo apt install $UBUNTU_DEPS -y

    - name: Setup compillers
      env:
        SHALLOW_CLONE: "git clone --depth=1 --single-branch"
        GCC_PREFIX: "https://android.googlesource.com/platform/prebuilts/gcc/linux-x86"
        GCC_POSTFIX: "+archive/refs/heads/master.tar.gz"
        DTBO_UTILS_URL: "https://android.googlesource.com/platform/system/libufdt/+archive/master/utils.tar.gz"
        LLVM_URL: "https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86"
        WGET: "wget -q -O"
      run: |
        mkdir toolchains
        $WGET gcc64.tar.gz "$GCC_PREFIX/aarch64/aarch64-linux-android-4.9/$GCC_POSTFIX"
        $WGET gcc32.tar.gz "$GCC_PREFIX/arm/arm-linux-androideabi-4.9/$GCC_POSTFIX"
        $WGET dtbo_utils.tar.gz "$DTBO_UTILS_URL"
        $SHALLOW_CLONE $LLVM_URL toolchains/llvm
        mkdir $GCC64_FOLDER $GCC32_FOLDER $DTBO_UTILS_FOLDER
        tar -C $GCC64_FOLDER -zxf gcc64.tar.gz
        tar -C $GCC32_FOLDER -zxf gcc32.tar.gz
        tar -C $DTBO_UTILS_FOLDER -zxf dtbo_utils.tar.gz

    - name: Append branch name
      run: python3 scripts/pancake/expose_version.py
    
    - name: Configure
      run: make O=out ARCH=$ARCH $DEFCONFIG

    - name: Build kernel
      run: |
        export LLVM_FINAL_FOLDER="${PWD}/${LLVM_FOLDER}/clang-r370808"
        export LD_LIBRARY_PATH="${LLVM_FINAL_FOLDER}/lib64:${LLVM_FINAL_FOLDER}/lib:$LD_LIBRARY_PATH"
        PATH="${LLVM_FINAL_FOLDER}/bin:${PWD}/$GCC32_FOLDER/bin:${PWD}/$GCC64_FOLDER/bin:${PATH}" \
        make -j$(nproc --all) O=out \
                              ARCH=arm64 \
                              CC=clang \
                              CLANG_TRIPLE=aarch64-linux-gnu- \
                              CROSS_COMPILE=aarch64-linux-android- \
                              CROSS_COMPILE_ARM32=arm-linux-androideabi-

    - name: Post build failure
      if: failure()
      env:
        MESSAGE_ID: ${{ steps.post_start.outputs.message_id }}
      run: python3 scripts/pancake/telegram_post.py fail $MESSAGE_ID

    - name: Build DTBO
      run: |
        cd $DTBO_UTILS_FOLDER/src/
        python mkdtboimg.py create ../../../out/arch/arm64/boot/dtbo.img ../../../out/arch/arm64/boot/dts/qcom/*.dtbo

    - name: Pack installer
      run: |
        mv out/arch/arm64/boot/Image.gz anykernel/
        mv out/arch/arm64/boot/dtbo.img anykernel/
        cd anykernel/
        zip -r9 pancake-mishamyrt.zip * -x *placeholder
        mv pancake-mishamyrt.zip ../out/
    
    - name: Upload installer
      uses: actions/upload-artifact@v1
      with:
        name: pancake-mishamyrt
        path: anykernel/
    
    - name: Publish on surge
      if: github.ref == 'refs/heads/ten-develop'
      env:
        SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
      run: |
        sudo npm install --global surge
        mkdir release
        cp ./out/pancake-mishamyrt.zip release/pancake.zip
        git log -n 50 --pretty=format:'* %s' > release/changelog.txt
        python3 scripts/pancake/fkm-release.py $GITHUB_SHA develop
        surge --project release/ -d https://pancake-develop.surge.sh --token $SURGE_TOKEN
        
    - name: Post update to Telegram
      env:
        MESSAGE_ID: ${{ steps.post_start.outputs.message_id }}
      run: python3 scripts/pancake/telegram_post.py success $MESSAGE_ID